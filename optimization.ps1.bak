# optimization.ps1
# Script to prepare VM for hibernation with ShopFloorEditor for SolidCAMOperator1

# Script execution logging
$scriptLogPath = "C:\ProgramData\SolidCAM\script_execution_log.txt"
$proofPath = "C:\ProgramData\SolidCAM\script_execution_proofs"

# Create directories if they don't exist
if (!(Test-Path (Split-Path -Parent $scriptLogPath))) {
    New-Item -Path (Split-Path -Parent $scriptLogPath) -ItemType Directory -Force | Out-Null
}
if (!(Test-Path $proofPath)) {
    New-Item -Path $proofPath -ItemType Directory -Force | Out-Null
}

# Log script execution start
$startTime = Get-Date
Add-Content -Path $scriptLogPath -Value "Script execution: $startTime - optimization.ps1 starting"
Write-Output "=== SCRIPT-ID: optimization.ps1 starting execution at $startTime ==="

Write-Output "=== PREPARING VM FOR HIBERNATION WITH SHOPFLOOREDITOR FOR SOLIDCAMOPERATOR1 ==="

# 1. Enable hibernation
Write-Output "1) Setting up hibernation..."
powercfg /hibernate on
powercfg /h /type full

# 2. Configure boot settings
Write-Output "2) Configuring boot settings..."
bcdedit /timeout 3
bcdedit /set bootmenupolicy standard
bcdedit /set {current} bootstatuspolicy ignoreallfailures

# 3. Configure services for faster RDP
Write-Output "3) Configuring RDP services..."
Set-Service -Name TermService -StartupType Automatic
Set-Service -Name UmRdpService -StartupType Automatic
Start-Service -Name TermService -ErrorAction SilentlyContinue
Start-Service -Name UmRdpService -ErrorAction SilentlyContinue

# 4. Set up SolidCAMOperator1 and ensure it's logged in
Write-Output "4) Setting up and logging in SolidCAMOperator1..."

# Check if the user is already logged in
$operatorLoggedIn = query session SolidCAMOperator1 2>$null
$operatorLoggedIn = ($LASTEXITCODE -eq 0)

if (-not $operatorLoggedIn) {
    Write-Output "SolidCAMOperator1 is not logged in. Will attempt to log in..."
    
    # Check if this account exists
    $userExists = Get-LocalUser -Name "SolidCAMOperator1" -ErrorAction SilentlyContinue
    
    if (-not $userExists) {
        Write-Output "SolidCAMOperator1 user does not exist. Creating user..."
        $securePassword = ConvertTo-SecureString "Rt@wqPP7ZvUgtS7" -AsPlainText -Force
        New-LocalUser -Name "SolidCAMOperator1" -Password $securePassword -FullName "SolidCAM Operator 1" -Description "SolidCAM User Account" -AccountNeverExpires
        Add-LocalGroupMember -Group "Users" -Member "SolidCAMOperator1"
        Write-Output "SolidCAMOperator1 user created successfully."
    }
    
    # Wait a bit before trying to authenticate
    Start-Sleep -Seconds 3
    
    # We need to auto-login the SolidCAMOperator1 account
    Write-Output "Setting up auto-login for SolidCAMOperator1..."
    
    # Registry path for autologon
    $RegPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
    
    # Set autologon registry values
    Set-ItemProperty -Path $RegPath -Name "AutoAdminLogon" -Value "1" -Type String
    Set-ItemProperty -Path $RegPath -Name "DefaultUserName" -Value "SolidCAMOperator1" -Type String
    Set-ItemProperty -Path $RegPath -Name "DefaultPassword" -Value "Rt@wqPP7ZvUgtS7" -Type String
    Set-ItemProperty -Path $RegPath -Name "DefaultDomainName" -Value "." -Type String
    
    Write-Output "Autologin configured. Will take effect on next boot or user switch."
}
else {
    Write-Output "SolidCAMOperator1 is already logged in. Proceeding with ShopFloorEditor setup."
}

# 5. Launch ShopFloorEditor for SolidCAMOperator1
Write-Output "5) Setting up ShopFloorEditor for SolidCAMOperator1..."
$editorPath = "C:\Program Files\SolidCAM2024 Maker\solidcam\ShopFloorEditor.exe"

# Check if ShopFloorEditor is already running
$shopFloorProcess = Get-Process -Name "ShopFloorEditor" -ErrorAction SilentlyContinue

if ($shopFloorProcess) {
    Write-Output "ShopFloorEditor is already running with PID: $($shopFloorProcess.Id)"
    
    # Check which user is running the process
    try {
        $processOwner = (Get-WmiObject -Query "Select * From Win32_Process Where ProcessId = $($shopFloorProcess.Id)").GetOwner()
        Write-Output "Process is running under user: $($processOwner.Domain)\$($processOwner.User)"
        
        # If it's not running as SolidCAMOperator1, we need to restart it
        if ($processOwner.User -ne "SolidCAMOperator1") {
            Write-Output "ShopFloorEditor is running but not as SolidCAMOperator1. Stopping process..."
            Stop-Process -Id $shopFloorProcess.Id -Force
            $shopFloorProcess = $null
        }
    } catch {
        Write-Output "Could not determine process owner: $_"
    }
}

if (-not $shopFloorProcess) {
    Write-Output "ShopFloorEditor is not running for SolidCAMOperator1. Attempting to start it..."
    
    if (Test-Path $editorPath) {
        Write-Output "Found ShopFloorEditor at: $editorPath"
        
        # If SolidCAMOperator1 is logged in, try to start the process in their session
        if ($operatorLoggedIn) {
            Write-Output "Starting ShopFloorEditor for SolidCAMOperator1..."
            
            try {
                # Get the SolidCAMOperator1 session ID
                $sessionInfo = query session SolidCAMOperator1 | Select-String -Pattern '\s+(\d+)\s+'
                if ($sessionInfo -match '\s+(\d+)\s+') {
                    $sessionId = $matches[1]
                    Write-Output "Found session ID $sessionId for SolidCAMOperator1"
                    
                    # Launch the application in that session
                    $processName = $editorPath.Replace(' ', '` ')
                    "& '$processName'"
                    
                    # Use PowerShell to launch in the user's session
                    # Using tscon and /dest will ensure it runs in the proper session
                    $startupScript = @"
Start-Process -FilePath '$editorPath'
"@
                    $scriptPath = "C:\ProgramData\SolidCAM\launch_editor.ps1"
                    Set-Content -Path $scriptPath -Value $startupScript
                    
                    # Use Scheduled Tasks to run as the user
                    $taskName = "SolidCAM-LaunchEditor-Temp"
                    $existingTask = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue
                    if ($existingTask) {
                        Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
                    }
                    
                    $action = New-ScheduledTaskAction -Execute "Powershell.exe" -Argument "-NoProfile -ExecutionPolicy Bypass -File $scriptPath"
                    $principal = New-ScheduledTaskPrincipal -UserId "SolidCAMOperator1" -LogonType Interactive -RunLevel Highest
                    
                    Register-ScheduledTask -TaskName $taskName -Action $action -Principal $principal -Force
                    Start-ScheduledTask -TaskName $taskName
                    
                    Write-Output "ShopFloorEditor launch task has been triggered. Waiting for process to start..."
                    
                    # Give it time to start
                    $maxWaitTime = 60 # seconds
                    $waitInterval = 5 # seconds
                    $totalWaitTime = 0
                    
                    do {
                        Start-Sleep -Seconds $waitInterval
                        $totalWaitTime += $waitInterval
                        $shopFloorProcess = Get-Process -Name "ShopFloorEditor" -ErrorAction SilentlyContinue
                        
                        if ($shopFloorProcess) {
                            Write-Output "ShopFloorEditor is now running with PID: $($shopFloorProcess.Id)"
                            break
                        }
                        
                        Write-Output "Still waiting for ShopFloorEditor to start... ($totalWaitTime seconds elapsed)"
                    } while ($totalWaitTime -lt $maxWaitTime)
                    
                    # Clean up the task
                    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
                    
                    if (-not $shopFloorProcess) {
                        Write-Output "WARNING: ShopFloorEditor did not start within the expected time."
                    }
                } else {
                    Write-Output "Could not determine session ID for SolidCAMOperator1. Direct launch may not work."
                    Start-Process -FilePath $editorPath
                }
            } catch {
                Write-Output "Error launching ShopFloorEditor: $_"
                Write-Output "Attempting direct process launch..."
                Start-Process -FilePath $editorPath
            }
        } else {
            Write-Output "SolidCAMOperator1 is not logged in. Setting up auto-start for ShopFloorEditor on login."
            
            # Create auto-start for ShopFloorEditor when SolidCAMOperator1 logs in
            $startupFolder = "C:\Users\SolidCAMOperator1\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
            
            # Ensure the startup folder exists
            if (!(Test-Path $startupFolder)) {
                New-Item -Path $startupFolder -ItemType Directory -Force | Out-Null
            }
            
            # Create a shortcut
            $shortcutPath = "$startupFolder\LaunchShopFloorEditor.lnk"
            $WshShell = New-Object -ComObject WScript.Shell
            $Shortcut = $WshShell.CreateShortcut($shortcutPath)
            $Shortcut.TargetPath = $editorPath
            $Shortcut.Save()
            
            Write-Output "Startup shortcut created for ShopFloorEditor. Will launch when SolidCAMOperator1 logs in."
            
            # Also create a scheduled task for additional reliability
            $taskName = "SolidCAM-LaunchShopFloorEditor"
            $existingTask = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue
            if ($existingTask) {
                Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
            }
            
            $action = New-ScheduledTaskAction -Execute $editorPath
            $trigger = New-ScheduledTaskTrigger -AtLogOn -User "SolidCAMOperator1"
            $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
            $principal = New-ScheduledTaskPrincipal -UserId "SolidCAMOperator1" -LogonType Interactive -RunLevel Highest
            
            Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force
            
            Write-Output "Scheduled task created for launching ShopFloorEditor when SolidCAMOperator1 logs in."
        }
    } else {
        Write-Output "ERROR: ShopFloorEditor executable not found at path: $editorPath"
    }
}

# 6. Wait for ShopFloorEditor to initialize
if ($shopFloorProcess) {
    Write-Output "6) Waiting for ShopFloorEditor to fully initialize..."
    Write-Output "   Giving ShopFloorEditor 30 seconds to fully initialize..."
    Start-Sleep -Seconds 30
    
    # Verify the process is still running
    $shopFloorProcess = Get-Process -Name "ShopFloorEditor" -ErrorAction SilentlyContinue
    if ($shopFloorProcess) {
        Write-Output "   SUCCESS: ShopFloorEditor is running and had time to initialize."
        
        # Create verification flags
        Write-Output "   Creating verification flags for post-hibernation checks..."
        $initTimestamp = Get-Date -Format "yyyyMMddHHmmss"
        Set-Content -Path "C:\ProgramData\SolidCAM\ShopFloorEditor_PreHibernation.txt" -Value "Process started at: $initTimestamp with PID: $($shopFloorProcess.Id)"
    } else {
        Write-Output "   WARNING: ShopFloorEditor appears to have terminated during initialization."
    }
} else {
    Write-Output "6) ShopFloorEditor is not running, hibernation may not preserve application state."
}

# 7. Create post-hibernation verification script
Write-Output "7) Creating post-hibernation verification script..."
$verificationScriptPath = "C:\ProgramData\SolidCAM\verify_hibernation.ps1"
$verificationScript = @"
# verify_hibernation.ps1
# This script verifies if ShopFloorEditor state was preserved during hibernation

Write-Output "=== Post-Hibernation Verification ==="
`$logPath = "C:\ProgramData\SolidCAM\hibernation_results.log"
Add-Content -Path `$logPath -Value "===== Verification run at: `$(Get-Date) ====="

# Check if ShopFloorEditor is running
`$shopFloorProcess = Get-Process -Name "ShopFloorEditor" -ErrorAction SilentlyContinue

if (`$shopFloorProcess) {
    Write-Output "SUCCESS: ShopFloorEditor is running with PID: `$(`$shopFloorProcess.Id)"
    Add-Content -Path `$logPath -Value "ShopFloorEditor running: YES, PID: `$(`$shopFloorProcess.Id)"
    
    # Check if the process start time predates the system boot time
    `$lastBootUpTime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
    `$processStartTime = `$shopFloorProcess.StartTime
    
    if (`$processStartTime -lt `$lastBootUpTime) {
        Write-Output "CONFIRMED: Process start time (`$processStartTime) predates system boot time (`$lastBootUpTime)"
        Write-Output "This confirms the application state was successfully preserved through hibernation!"
        Add-Content -Path `$logPath -Value "Process preserved through hibernation: YES"
    } else {
        Write-Output "NOTE: Process start time (`$processStartTime) is after system boot time (`$lastBootUpTime)"
        Write-Output "The process may have been restarted rather than resumed from hibernation."
        Add-Content -Path `$logPath -Value "Process preserved through hibernation: NO - started after boot"
    }
    
    # Check which user is running the process
    try {
        `$processOwner = (Get-WmiObject -Query "Select * From Win32_Process Where ProcessId = `$(`$shopFloorProcess.Id)").GetOwner()
        Write-Output "Process is running as: `$(`$processOwner.Domain)\`$(`$processOwner.User)"
        Add-Content -Path `$logPath -Value "Process owner: `$(`$processOwner.Domain)\`$(`$processOwner.User)"
        
        if (`$processOwner.User -eq "SolidCAMOperator1") {
            Write-Output "CONFIRMED: Process is running as SolidCAMOperator1 as expected"
            Add-Content -Path `$logPath -Value "Running as SolidCAMOperator1: YES"
        } else {
            Write-Output "WARNING: Process is NOT running as SolidCAMOperator1"
            Add-Content -Path `$logPath -Value "Running as SolidCAMOperator1: NO - running as `$(`$processOwner.User)"
        }
    } catch {
        Write-Output "Could not determine process owner: `$_"
        Add-Content -Path `$logPath -Value "Could not determine process owner: `$_"
    }
} else {
    Write-Output "CRITICAL ERROR: ShopFloorEditor is NOT running after hibernation!"
    Write-Output "Hibernation did not preserve the application state."
    Add-Content -Path `$logPath -Value "ShopFloorEditor running: NO - hibernation did not preserve the application"
    
    # Check if SolidCAMOperator1 is logged in
    `$operatorLoggedIn = query session SolidCAMOperator1 2>$null
    `$isLoggedIn = (`$LASTEXITCODE -eq 0)
    
    if (`$isLoggedIn) {
        Write-Output "NOTE: SolidCAMOperator1 is logged in, but ShopFloorEditor is not running."
        Add-Content -Path `$logPath -Value "SolidCAMOperator1 logged in: YES, but ShopFloorEditor not running"
    } else {
        Write-Output "NOTE: SolidCAMOperator1 is NOT logged in. This may be why ShopFloorEditor is not running."
        Add-Content -Path `$logPath -Value "SolidCAMOperator1 logged in: NO"
    }
}
"@

Set-Content -Path $verificationScriptPath -Value $verificationScript

# Create a task to run the verification script at startup
$taskName = "SolidCAM-VerifyHibernation"
$existingTask = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue
if ($existingTask) {
    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
}

$action = New-ScheduledTaskAction -Execute "Powershell.exe" -Argument "-NoProfile -ExecutionPolicy Bypass -File $verificationScriptPath"
$trigger = New-ScheduledTaskTrigger -AtStartup
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -WakeToRun
$principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest

Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force

Write-Output "Verification script and startup task created successfully."

# Final summary
Write-Output "=== OPTIMIZATION SUMMARY ==="
Write-Output "Hibernation enabled: YES"
Write-Output "ShopFloorEditor running: $($null -ne $shopFloorProcess)"
if ($shopFloorProcess) {
    Write-Output "ShopFloorEditor PID: $($shopFloorProcess.Id)"
}
Write-Output "SolidCAMOperator1 logged in: $operatorLoggedIn"
Write-Output "Post-hibernation verification configured: YES"
Write-Output "=== VM IS READY FOR HIBERNATION ==="

# Log script execution end
$endTime = Get-Date
$executionTime = $endTime - $startTime
Add-Content -Path $scriptLogPath -Value "Script execution: $endTime - optimization.ps1 completed in $($executionTime.TotalSeconds) seconds"
Write-Output "=== SCRIPT-ID: optimization.ps1 completed execution at $endTime ==="

# Create a proof file for this execution
Set-Content -Path "$proofPath\optimization_ran_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt" -Value "Script executed from $startTime to $endTime
Hibernation enabled: YES
ShopFloorEditor running: $($null -ne $shopFloorProcess)
SolidCAMOperator1 logged in: $operatorLoggedIn"