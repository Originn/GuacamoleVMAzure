# hibernation_setup.ps1
# Script to prepare for Azure VM hibernation with ShopFloorEditor running for SolidCAMOperator1

# Script execution logging
$scriptLogPath = "C:\ProgramData\SolidCAM\script_execution_log.txt"
$proofPath = "C:\ProgramData\SolidCAM\script_execution_proofs"

# Create directories if they don't exist
if (!(Test-Path (Split-Path -Parent $scriptLogPath))) {
    New-Item -Path (Split-Path -Parent $scriptLogPath) -ItemType Directory -Force | Out-Null
}
if (!(Test-Path $proofPath)) {
    New-Item -Path $proofPath -ItemType Directory -Force | Out-Null
}

# Log script execution start
$startTime = Get-Date
Add-Content -Path $scriptLogPath -Value "Script execution: $startTime - hibernation_setup.ps1 starting"
Write-Output "=== SCRIPT-ID: hibernation_setup.ps1 starting execution at $startTime ==="

Write-Output "=== Preparing VM for hibernation with ShopFloorEditor running for SolidCAMOperator1 ==="

# 1. Ensure hibernation is enabled and set to full
Write-Output "1) Enabling full hibernation..."
powercfg /hibernate on
powercfg /h /type full

# 2. Launch ShopFloorEditor for SolidCAMOperator1
$editorPath = "C:\Program Files\SolidCAM2024 Maker\solidcam\ShopFloorEditor.exe"
Write-Output "2) Checking if ShopFloorEditor is running for SolidCAMOperator1..."

# Check if ShopFloorEditor is already running
$shopFloorProcess = Get-Process -Name "ShopFloorEditor" -ErrorAction SilentlyContinue

if ($shopFloorProcess) {
    Write-Output "ShopFloorEditor is already running with PID: $($shopFloorProcess.Id)"
    
    # Try to check which user is running the process
    try {
        $processOwner = (Get-WmiObject -Query "Select * From Win32_Process Where ProcessId = $($shopFloorProcess.Id)").GetOwner()
        Write-Output "Process is running under user: $($processOwner.Domain)\$($processOwner.User)"
    } catch {
        Write-Output "Could not determine process owner: $_"
    }
} else {
    Write-Output "ShopFloorEditor is not running. Attempting to start it for SolidCAMOperator1..."
    
    # Check if SolidCAMOperator1 is logged in
    $operatorLoggedIn = query session SolidCAMOperator1 2>$null
    $operatorLoggedIn = ($LASTEXITCODE -eq 0)
    
    if ($operatorLoggedIn) {
        Write-Output "SolidCAMOperator1 is logged in. Starting ShopFloorEditor in that session..."
        
        try {
            # Get the session ID for SolidCAMOperator1
            $sessions = query session | Where-Object { $_ -match "SolidCAMOperator1" }
            $sessionId = $sessions -split '\s+' | Where-Object { $_ -match '^\d+$' } | Select-Object -First 1
            
            if ($sessionId) {
                Write-Output "Found session ID for SolidCAMOperator1: $sessionId"
                
                # Use psexec or similar to run in that session
                $psexecPath = "C:\Windows\System32\cmd.exe"
                $arguments = "/c start /min $editorPath"
                
                # Use the Windows RunAs command
                Start-Process -FilePath $psexecPath -ArgumentList $arguments -LoadUserProfile -NoNewWindow
                
                Write-Output "Launched ShopFloorEditor for SolidCAMOperator1. Waiting for process to initialize..."
                Start-Sleep -Seconds 30  # Give it plenty of time to load
                
                # Check if the process is now running
                $newProcess = Get-Process -Name "ShopFloorEditor" -ErrorAction SilentlyContinue
                if ($newProcess) {
                    Write-Output "SUCCESS: ShopFloorEditor is now running with PID: $($newProcess.Id)"
                } else {
                    Write-Output "WARNING: Could not verify that ShopFloorEditor started. It may need to be started manually."
                }
            } else {
                Write-Output "Could not determine session ID for SolidCAMOperator1. Attempting to start process anyway..."
                Start-Process -FilePath $editorPath
            }
        } catch {
            Write-Output "Error launching ShopFloorEditor: $_"
            Write-Output "Manual intervention may be required to ensure ShopFloorEditor is running."
        }
    } else {
        Write-Output "SolidCAMOperator1 is not logged in. ShopFloorEditor must be running under the logged-in user's context."
        Write-Output "Please ensure SolidCAMOperator1 is logged in and ShopFloorEditor is started before hibernation."
    }
}

# 3. Create a post-hibernation validation script
Write-Output "3) Creating post-hibernation validation script..."
$validationScriptPath = "C:\ProgramData\SolidCAM\validate_resume.ps1"
$validationScript = @"
# validate_resume.ps1
# Check if ShopFloorEditor is still running after hibernation

Write-Output "=== Post-Hibernation Validation ==="
Write-Output "Checking if ShopFloorEditor maintained its state through hibernation..."

# Get system boot time
`$lastBootUpTime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
`$uptime = (Get-Date) - `$lastBootUpTime
Write-Output "System uptime: `$(`$uptime.Hours) hours, `$(`$uptime.Minutes) minutes, `$(`$uptime.Seconds) seconds"

# Check for ShopFloorEditor process
`$shopFloorProcess = Get-Process -Name "ShopFloorEditor" -ErrorAction SilentlyContinue

if (`$shopFloorProcess) {
    Write-Output "SUCCESS: ShopFloorEditor is running with PID: `$(`$shopFloorProcess.Id)"
    Write-Output "Process start time: `$(`$shopFloorProcess.StartTime)"
    
    # Compare process start time with system boot time
    `$processUptime = (Get-Date) - `$shopFloorProcess.StartTime
    
    if (`$processUptime.TotalSeconds -gt `$uptime.TotalSeconds) {
        Write-Output "CONFIRMED: Process start time predates system boot time!"
        Write-Output "This confirms the application state was preserved through hibernation."
    } else {
        Write-Output "NOTE: Process appears to have been started after system boot."
        Write-Output "Application state may not have been preserved through hibernation."
    }
} else {
    Write-Output "WARNING: ShopFloorEditor is not running after hibernation."
    Write-Output "Hibernation may not have preserved the application state correctly."
}

# Log the results
`$logPath = "C:\ProgramData\SolidCAM\hibernation_results.txt"
Add-Content -Path `$logPath -Value "Validation run: `$(Get-Date)"
Add-Content -Path `$logPath -Value "ShopFloorEditor running: `$(`$null -ne `$shopFloorProcess)"
if (`$shopFloorProcess) {
    Add-Content -Path `$logPath -Value "Process predates boot: `$(`$processUptime.TotalSeconds -gt `$uptime.TotalSeconds)"
}
Add-Content -Path `$logPath -Value "-----------------------------------"
"@

Set-Content -Path $validationScriptPath -Value $validationScript

Write-Output "4) Preparing startup task to validate hibernation on boot..."
$taskName = "SolidCAM-ValidateHibernation"
$taskExists = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue

if ($taskExists) {
    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
}

$action = New-ScheduledTaskAction -Execute "Powershell.exe" -Argument "-NoProfile -ExecutionPolicy Bypass -File $validationScriptPath"
$trigger = New-ScheduledTaskTrigger -AtStartup
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
$principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest

Register-ScheduledTask -TaskName $taskName `
                      -Action $action `
                      -Trigger $trigger `
                      -Settings $settings `
                      -Principal $principal `
                      -Force

Write-Output "Post-hibernation validation task created successfully."

# Log script execution end
$endTime = Get-Date
$executionTime = $endTime - $startTime
Add-Content -Path $scriptLogPath -Value "Script execution: $endTime - hibernation_setup.ps1 completed in $($executionTime.TotalSeconds) seconds"
Write-Output "=== SCRIPT-ID: hibernation_setup.ps1 completed execution at $endTime ==="

# Create a proof file for this execution
Set-Content -Path "$proofPath\hibernation_setup_ran_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt" -Value "Script executed from $startTime to $endTime
ShopFloorEditor running: $($null -ne $shopFloorProcess)"